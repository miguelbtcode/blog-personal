generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  USER
  ADMIN
  EDITOR
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}

// User model
model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  image         String?
  bio           String?         @db.Text
  role          Role            @default(USER)
  emailVerified DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]

  @@map("users")
}

// Posts model
model Post {
  id             String     @id @default(cuid())
  title          String
  slug           String     @unique
  excerpt        String?    @db.Text
  content        String     @db.LongText
  featuredImage  String?
  status         PostStatus @default(DRAFT)
  published      Boolean    @default(false)
  publishedAt    DateTime?
  viewCount      Int        @default(0)
  readTime       Int? // minutes
  seoTitle       String?
  seoDescription String?    @db.Text
  authorId       String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  author         User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories     PostCategory[]
  tags           PostTag[]
  comments       Comment[]

  @@index([slug])
  @@index([status, published])
  @@index([publishedAt])
  @@index([authorId])
  @@map("posts")
}

// Categories model
model Category {
  id          String         @id @default(cuid())
  name        String         @unique
  slug        String         @unique
  description String?        @db.Text
  color       String? // hex color
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  posts       PostCategory[]

  @@map("categories")
}

// Tags model
model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  posts     PostTag[]

  @@map("tags")
}

// Post-Category relationship (many-to-many)
model PostCategory {
  postId     String
  categoryId String

  // Relations
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
  @@map("post_categories")
}

// Post-Tag relationship (many-to-many)
model PostTag {
  postId String
  tagId  String

  // Relations
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post_tags")
}

// Comments model
model Comment {
  id         String        @id @default(cuid())
  content    String        @db.Text
  status     CommentStatus @default(PENDING)
  postId     String
  authorId   String?
  parentId   String? // for replies
  guestName  String?
  guestEmail String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Relations
  post       Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author     User?     @relation(fields: [authorId], references: [id], onDelete: SetNull)
  parent     Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies    Comment[] @relation("CommentReplies")

  @@index([postId])
  @@index([status])
  @@map("comments")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}